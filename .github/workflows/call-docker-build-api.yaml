name: Build and Deploy API

on:
  push:
    branches:
      - 'main'
    paths:
      - 'api/**'
      - '.github/workflows/call-docker-build-api.yaml'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'api/**'
      - '.github/workflows/call-docker-build-api.yaml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t shirg3/wordsmith-api:latest api/
          docker push shirg3/wordsmith-api:latest

      - name: Deploy to EC2 Minikube
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Set up SSH
          echo "$EC2_SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Start Minikube if not running
            if ! minikube status | grep -q 'host: Running'; then
              minikube start --driver=docker
            fi

            # Set Docker environment variables for Minikube
            eval $(minikube docker-env)

            # Pull the latest image from Docker Hub
            docker pull shirg3/wordsmith-api:latest

            # Apply Kubernetes deployment
            kubectl apply -f /home/ubuntu/wordsmith_app/k8s-manifests/api.yaml

            # Restart the deployment
            kubectl rollout restart deployment/api

            # Wait for the deployment to be ready
            kubectl rollout status deployment/api
          EOF

          # Clean up
          rm -f private_key.pem
